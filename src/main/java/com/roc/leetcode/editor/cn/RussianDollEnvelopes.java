//Áªô‰Ω†‰∏Ä‰∏™‰∫åÁª¥Êï¥Êï∞Êï∞ÁªÑ envelopes ÔºåÂÖ∂‰∏≠ envelopes[i] = [wi, hi] ÔºåË°®Á§∫Á¨¨ i ‰∏™‰ø°Â∞ÅÁöÑÂÆΩÂ∫¶ÂíåÈ´òÂ∫¶„ÄÇ 
//
// ÂΩìÂè¶‰∏Ä‰∏™‰ø°Â∞ÅÁöÑÂÆΩÂ∫¶ÂíåÈ´òÂ∫¶ÈÉΩÊØîËøô‰∏™‰ø°Â∞ÅÂ§ßÁöÑÊó∂ÂÄôÔºåËøô‰∏™‰ø°Â∞ÅÂ∞±ÂèØ‰ª•ÊîæËøõÂè¶‰∏Ä‰∏™‰ø°Â∞ÅÈáåÔºåÂ¶ÇÂêå‰øÑÁΩóÊñØÂ•óÂ®É‰∏ÄÊ†∑„ÄÇ 
//
// ËØ∑ËÆ°ÁÆó ÊúÄÂ§öËÉΩÊúâÂ§öÂ∞ë‰∏™ ‰ø°Â∞ÅËÉΩÁªÑÊàê‰∏ÄÁªÑ‚Äú‰øÑÁΩóÊñØÂ•óÂ®É‚Äù‰ø°Â∞ÅÔºàÂç≥ÂèØ‰ª•Êää‰∏Ä‰∏™‰ø°Â∞ÅÊîæÂà∞Âè¶‰∏Ä‰∏™‰ø°Â∞ÅÈáåÈù¢Ôºâ„ÄÇ 
//
// Ê≥®ÊÑèÔºö‰∏çÂÖÅËÆ∏ÊóãËΩ¨‰ø°Â∞Å„ÄÇ 
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//ËæìÂÖ•Ôºöenvelopes = [[5,4],[6,4],[6,7],[2,3]]
//ËæìÂá∫Ôºö3
//Ëß£ÈáäÔºöÊúÄÂ§ö‰ø°Â∞ÅÁöÑ‰∏™Êï∞‰∏∫ 3, ÁªÑÂêà‰∏∫: [2,3] => [5,4] => [6,7]„ÄÇ 
//
// Á§∫‰æã 2Ôºö 
//
// 
//ËæìÂÖ•Ôºöenvelopes = [[1,1],[1,1],[1,1]]
//ËæìÂá∫Ôºö1
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= envelopes.length <= 10‚Åµ 
// envelopes[i].length == 2 
// 1 <= wi, hi <= 10‚Åµ 
// 
// Related Topics Êï∞ÁªÑ ‰∫åÂàÜÊü•Êâæ Âä®ÊÄÅËßÑÂàí ÊéíÂ∫è üëç 798 üëé 0

/**
 * @author dongp
 */
package com.roc.leetcode.editor.cn;

import java.util.*;

public class RussianDollEnvelopes {
    public static void main(String[] args) {
        Solution solution = new RussianDollEnvelopes().new Solution();
        int[][] envelopes = new int[][]{
                {15, 8},
                {2, 20},
                {2, 14},
                {4, 17},
                {8, 19},
                {8, 9},
                {5, 7},
                {11, 19},
                {8, 11},
                {13, 11},
                {2, 13},
                {11, 19},
                {8, 11},
                {13, 11},
                {2, 13},
                {11, 19},
                {16, 1},
                {18, 13},
                {14, 17},
                {18, 19},
        };
        solution.maxEnvelopes(envelopes);
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public int maxEnvelopes(int[][] envelopes) {
            Arrays.sort(envelopes, (o1, o2) -> {
                if (o1[0] == o2[0]) {
                    return o1[1] - o2[1];
                } else {
                    return o1[0] - o2[0];
                }
            });
            int n = envelopes.length;
            int[] dp = new int[n];
            dp[0] = 1;
            PriorityQueue<int[]> queue = new PriorityQueue<>(((o1, o2) -> o2[0] - o1[0]));
            queue.add(new int[]{1, 0});
            for (int i = 1; i < n; i++) {
                List<int[]> temp = new ArrayList<>();
                while (!queue.isEmpty()) {
                    int[] poll = queue.poll();
                    temp.add(poll);
                    if (envelopes[i][0] > envelopes[poll[1]][0] && envelopes[i][1] > envelopes[poll[1]][1]) {
                        dp[i] = poll[0] + 1;
                        break;
                    }
                    dp[i] = 1;
                }
                temp.add(new int[]{dp[i], i});
                queue.addAll(temp);
            }
            return Arrays.stream(dp).max().getAsInt();
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}